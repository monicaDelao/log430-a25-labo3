name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  DOCKER_IMAGE_NAME: log430-labo3
  DOCKER_REGISTRY: ghcr.io
  
jobs:
  # Job 1: Tests unitaires et qualité du code
  test:
    name: Tests et Qualité
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: labo03_db
          MYSQL_USER: labo03
          MYSQL_PASSWORD: labo03
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4
        
      - name: Configuration Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Cache des dépendances
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Installation des dépendances
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black isort

      - name: Création du fichier .env
        run: |
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_NAME=labo03_db" >> .env
          echo "DB_USER=labo03" >> .env
          echo "DB_PASS=labo03" >> .env
          echo "REDIS_HOST=127.0.0.1" >> .env
          echo "REDIS_PORT=6379" >> .env
          echo "REDIS_DB=0" >> .env
          
      - name: Attendre que MySQL soit prêt
        run: |
          for i in {30..0}; do
            if mysqladmin ping -h 127.0.0.1 -P 3306 -u root -proot; then
              break
            fi
            echo 'En attente de MySQL...'
            sleep 1
          done
          
      - name: Initialiser la base de données
        run: |
          mysql -h 127.0.0.1 -P 3306 -u root -proot labo03_db < db-init/init.sql
          
      - name: Vérification du formatage avec Black
        run: black --check --diff src/
        
      - name: Analyse statique avec flake8
        run: flake8 src/ --max-line-length=100 --ignore=E501,W503
        
      - name: Exécution des tests avec couverture
        working-directory: src
        run: |
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --cov-report=term
          
      - name: Upload de la couverture vers Codecov
        uses: codecov/codecov-action@v3
        with:
          file: src/coverage.xml
          fail_ci_if_error: false

  # Job 2: Build et tests d'intégration Docker
  docker-build:
    name: Build Docker et Tests d'Intégration
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4
        
      - name: Configuration Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Connexion au registre GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extraction des métadonnées
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build et push de l'image Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Tests d'intégration avec Docker Compose
        run: |
          docker-compose up -d
          sleep 30
          # Vérifier que les services sont en cours d'exécution
          docker-compose ps
          # Tester les endpoints
          curl -f http://localhost:5000/health || exit 1
          docker-compose down
          
  # Job 3: Scan de sécurité
  security-scan:
    name: Scan de Sécurité
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4
        
      - name: Scan de sécurité avec Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload des résultats vers GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
