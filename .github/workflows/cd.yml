name: CD Pipeline (Deployment)

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types: [completed]
    branches: [ main ]

permissions:
  contents: read
  packages: write
  pages: write
  id-token: write

env:
  DOCKER_IMAGE_NAME: log430-labo3
  DOCKER_REGISTRY: ghcr.io
  REPO_NAME: monicadelao/log430-a25-labo3

jobs:
  # Job 1: D√©ploiement Docker automatique
  deploy-docker:
    name: D√©ploiement Docker Registry
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.ref == 'refs/heads/main' }}
    environment:
      name: docker-registry
      
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4
        
      - name: Configuration Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Connexion au registre GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extraction des m√©tadonn√©es pour production
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=main-
            type=raw,value=stable
            type=raw,value=production
            
      - name: Build et push image de production
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: V√©rification de l'image d√©ploy√©e
        env:
          IMAGE_NAME: ${{ env.DOCKER_REGISTRY }}/${{ env.REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:production
        run: |
          echo "V√©rification que l'image existe..."
          docker pull ${{ env.IMAGE_NAME }}
          echo "‚úÖ Image r√©cup√©r√©e avec succ√®s"
          
          echo "Informations de l'image:"
          docker inspect ${{ env.IMAGE_NAME }} --format='{{.Config.Cmd}}'
          echo "‚úÖ Image de production valid√©e"

  # Job 2: Tests d'acceptation automatis√©s
  acceptance-tests:
    name: Tests d'Acceptation Automatis√©s
    runs-on: ubuntu-latest
    needs: deploy-docker
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: labo03_db
          MYSQL_USER: labo03
          MYSQL_PASSWORD: labo03
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4
        
      - name: Configuration Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Installation des d√©pendances de test
        run: |
          pip install requests pytest
          
      - name: Connexion au registre Docker
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Initialisation de la base de donn√©es
        run: |
          mysql -h 127.0.0.1 -P 3306 -u root -proot labo03_db < db-init/init.sql
          
      - name: D√©marrage de l'application en mode test
        run: |
          docker run --rm -d -p 5000:5000 --name acceptance-test \
            --network host \
            -e DB_HOST=127.0.0.1 \
            -e DB_PORT=3306 \
            -e DB_NAME=labo03_db \
            -e DB_USER=labo03 \
            -e DB_PASS=labo03 \
            -e REDIS_HOST=127.0.0.1 \
            -e REDIS_PORT=6379 \
            -e REDIS_DB=0 \
            ${{ env.DOCKER_REGISTRY }}/${{ env.REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:production
          sleep 15
          
      - name: Ex√©cution des tests d'acceptation
        run: |
          python scripts/acceptance_tests.py --staging-url=http://localhost:5000
          
      - name: Tests de performance de base
        run: |
          curl -w "@scripts/curl-format.txt" -o /dev/null -s http://localhost:5000/health
          
      - name: Nettoyage
        if: always()
        run: |
          docker stop acceptance-test || true

  # Job 3: G√©n√©ration et d√©ploiement de la documentation
  deploy-docs:
    name: D√©ploiement Documentation
    runs-on: ubuntu-latest
    needs: acceptance-tests
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      pages: write
      id-token: write
      
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4
        
      - name: Configuration Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Installation des outils de documentation
        run: |
          pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin
          
      - name: G√©n√©ration du rapport CI/CD
        run: |
          mkdir -p docs/cicd
          cat > docs/cicd/pipeline-status.md << EOF
          # √âtat du Pipeline CI/CD
          
          **Derni√®re mise √† jour:** $(date)
          **Commit:** ${{ github.sha }}
          **Branche:** ${{ github.ref_name }}
          
          ## Statut des Jobs
          
          Tests et Qualit√© - PASS√â  
          Build Docker - PASS√â  
          Scan de S√©curit√© - PASS√â  
          D√©ploiement Docker Registry - PASS√â  
          Tests d'Acceptation - PASS√â  
          D√©ploiement Documentation - EN COURS  
          
          ## M√©triques
          
          - **Image Docker:** \`${{ env.DOCKER_REGISTRY }}/${{ env.REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:production\`
          - **Taille de l'image:** Voir les logs du build
          - **Tests pass√©s:** Voir les rapports de tests
          
          ## Liens Utiles
          
          - [Code Source](https://github.com/${{ github.repository }})
          - [Docker Registry](https://github.com/${{ github.repository }}/pkgs/container/${{ env.DOCKER_IMAGE_NAME }})
          - [Actions GitHub](https://github.com/${{ github.repository }}/actions)
          EOF
          
      - name: Configuration des pages GitHub
        uses: actions/configure-pages@v3
        
      - name: Construction de la documentation
        run: |
          # Cr√©er un mkdocs.yml simple
          cat > mkdocs.yml << EOF
          site_name: LOG430 Labo3 - Documentation CI/CD
          theme:
            name: material
            palette:
              primary: blue
              accent: light-blue
          nav:
            - Accueil: index.md
            - Architecture: docs.md
            - Pipeline CI/CD: cicd/pipeline-status.md
            - ADR: adr/adr001.md
          markdown_extensions:
            - mermaid2
          EOF
          
          # Copier la documentation existante
          cp docs/arc42/docs.md docs/
          cp -r docs/adr docs/
          
          # Page d'accueil
          cat > docs/index.md << EOF
          # LOG430 Laboratoire 3 - Store Manager
          
          Application de gestion de magasin avec Flask, MySQL, Redis et GraphQL.
          
          ## Pipeline CI/CD Automatis√©
          
          Ce projet utilise un pipeline CI/CD complet avec :
          
          - **CI (Continuous Integration):** Tests automatis√©s, analyse de code, build Docker
          - **CD (Continuous Deployment):** D√©ploiement automatique, tests d'acceptation
          
          [üìä Voir l'√©tat du pipeline](cicd/pipeline-status.md)
          
          ## Architecture
          
          [üìê Voir la documentation d'architecture](docs.md)
          
          ## D√©cisions Architecturales
          
          [üìã Voir les ADR](adr/adr001.md)
          EOF
          
          mkdocs build
          
      - name: Upload des artefacts
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./site
          
      - name: D√©ploiement vers GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  # Job 4: D√©ploiement sur VM de Production
  deploy-vm:
    name: D√©ploiement VM Production
    runs-on: ubuntu-latest
    needs: acceptance-tests
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: vm-production
      url: http://10.194.32.238:5000
      
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4
        
      - name: Pr√©paration des fichiers de d√©ploiement
        run: |
          # Cr√©er le fichier docker-compose pour la VM
          cat > docker-compose.vm.yml << EOF
          version: '3.8'
          services:
            app:
              image: ${{ env.DOCKER_REGISTRY }}/${{ env.REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:production
              ports:
                - "5000:5000"
              environment:
                - DB_HOST=mysql
                - DB_PORT=3306
                - DB_NAME=labo03_db
                - DB_USER=labo03
                - DB_PASS=labo03
                - REDIS_HOST=redis
                - REDIS_PORT=6379
                - REDIS_DB=0
              depends_on:
                - mysql
                - redis
              restart: unless-stopped
              
            mysql:
              image: mysql:8.0
              environment:
                MYSQL_ROOT_PASSWORD: root
                MYSQL_DATABASE: labo03_db
                MYSQL_USER: labo03
                MYSQL_PASSWORD: labo03
              ports:
                - "3306:3306"
              volumes:
                - mysql_data:/var/lib/mysql
                - ./db-init/init.sql:/docker-entrypoint-initdb.d/init.sql
              restart: unless-stopped
              
            redis:
              image: redis:7-alpine
              ports:
                - "6379:6379"
              volumes:
                - redis_data:/data
              restart: unless-stopped
              
          volumes:
            mysql_data:
            redis_data:
          EOF
          
      - name: D√©ploiement sur VM via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          password: ${{ secrets.VM_PASSWORD }}
          port: 22
          script_stop: true
          script: |
            # Cr√©er le r√©pertoire de d√©ploiement
            mkdir -p ~/log430-labo3-deploy
            cd ~/log430-labo3-deploy
            
            # Installer Docker et Docker Compose si n√©cessaire
            if ! command -v docker &> /dev/null; then
              echo "Installation de Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker $USER
            fi
            
            if ! command -v docker &> /dev/null; then
              echo "Installation de Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker $USER
            fi
            
            # Nettoyer les anciens d√©ploiements
            docker compose down || true
            docker system prune -f || true
            
      - name: Copie des fichiers de d√©ploiement
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          password: ${{ secrets.VM_PASSWORD }}
          port: 22
          source: "docker-compose.vm.yml,db-init/"
          target: "~/log430-labo3-deploy/"
          
      - name: Ex√©cution du d√©ploiement sur VM
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          password: ${{ secrets.VM_PASSWORD }}
          port: 22
          script_stop: true
          script: |
            cd ~/log430-labo3-deploy
            
            # Connexion au registry GitHub
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Tirer la nouvelle image
            docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:production
            
            # Arr√™ter les anciens conteneurs
            docker compose -f docker-compose.vm.yml down || true
            
            # D√©marrer les nouveaux conteneurs
            docker compose -f docker-compose.vm.yml up -d
            
            # Attendre que l'application soit pr√™te
            echo "Attente que l'application soit pr√™te..."
            for i in {1..30}; do
              if curl -f http://localhost:5000/health > /dev/null 2>&1; then
                echo "Application d√©marr√©e avec succ√®s sur la VM!"
                break
              fi
              echo "Tentative $i/30..."
              sleep 10
            done
            
            # V√©rifier le statut final
            docker compose -f docker-compose.vm.yml ps
            
      - name: Tests de sant√© sur VM
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          password: ${{ secrets.VM_PASSWORD }}
          port: 22
          script: |
            echo "Tests de sant√© sur la VM..."
            
            # Test endpoint health
            curl -f http://localhost:5000/health || exit 1
            echo "Test /health - OK"
            
            # Test endpoint health-check
            curl -f http://localhost:5000/health-check || exit 1
            echo "Test /health-check - OK"
            
            # V√©rifier que tous les conteneurs tournent
            docker compose -f ~/log430-labo3-deploy/docker-compose.vm.yml ps
            
            echo "Tous les tests de sant√© sur VM sont pass√©s!"

  # Job 5: Notification de succ√®s complet
  notify-success:
    name: Notification de Succ√®s Complet
    runs-on: ubuntu-latest
    needs: [deploy-docker, acceptance-tests, deploy-docs, deploy-vm]
    if: success()
    
    steps:
      - name: R√©sum√© du d√©ploiement complet
        run: |
          echo "D√©ploiement CD complet r√©ussi!"
          echo "Image Docker: ${{ env.DOCKER_REGISTRY }}/${{ env.REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:production"
          echo "Documentation: Voir GitHub Pages"
          echo "VM Production: http://10.194.32.238:5000"
          echo "Tous les tests d'acceptation sont pass√©s"